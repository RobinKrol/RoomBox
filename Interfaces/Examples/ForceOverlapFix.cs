using UnityEngine;
using InventorySystem.OptimizedComponents;
using InventorySystem.Configuration;
using InventorySystem.BaseComponents;

namespace InventorySystem.Examples
{
    /// <summary>
    /// –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–∞ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –Ω–∞–ª–æ–∂–µ–Ω–∏–π
    /// </summary>
    public class ForceOverlapFix : MonoBehaviour
    {
        [ContextMenu("üö® –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï")]
        public void ForceFixOverlap()
        {
            Debug.Log("üö® –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ù–ê–õ–û–ñ–ï–ù–ò–ô");
            Debug.Log("=====================================");
            
            var validator = FindFirstObjectByType<OptimizedItemPlacementValidator>();
            if (validator == null)
            {
                Debug.LogError("‚ùå OptimizedItemPlacementValidator –Ω–µ –Ω–∞–π–¥–µ–Ω!");
                return;
            }
            
            Debug.Log("üîß –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏...");
            
            // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
            var config = new PlacementValidationConfig();
            
            // –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ù–ê–°–¢–†–û–ô–ö–ò
            SetConfigField(config, "preventObjectOverlap", true);
            SetConfigField(config, "useStrictValidation", true);
            SetConfigField(config, "enableLayerSystem", true);
            SetConfigField(config, "collisionCheckRadius", 0.3f);
            SetConfigField(config, "overlapCheckMargin", 0.05f);
            
            // –ù–ê–°–¢–†–û–ô–ö–ò –ú–ê–°–û–ö
            int furnitureLayer = LayerMask.NameToLayer("Furniture");
            int surfaceLayer = LayerMask.NameToLayer("Surface");
            int staticEnvLayer = LayerMask.NameToLayer("StaticEnvironment");
            
            if (furnitureLayer == -1 || surfaceLayer == -1)
            {
                Debug.LogError("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Å–ª–æ–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!");
                return;
            }
            
            // CollisionCheckMask = Furniture + Surface (–ø—Ä–µ–¥–º–µ—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –¥–æ–ª–∂–Ω—ã –ø–µ—Ä–µ—Å–µ–∫–∞—Ç—å—Å—è)
            LayerMask collisionMask = (1 << furnitureLayer) | (1 << surfaceLayer);
            SetConfigField(config, "collisionCheckMask", collisionMask);
            
            // SurfaceCheckMask = Surface + StaticEnvironment (–¥–ª—è –ø–æ–ª–∞)
            LayerMask surfaceMask = (1 << surfaceLayer) | (1 << staticEnvLayer);
            SetConfigField(config, "surfaceCheckMask", surfaceMask);
            
            // –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û –£–°–¢–ê–ù–ê–í–õ–ò–í–ê–ï–ú –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Æ
            SetValidatorConfig(validator, config);
            
            // –ü–†–û–í–ï–†–Ø–ï–ú, –ß–¢–û –ù–ê–°–¢–†–û–ô–ö–ò –ü–†–ò–ú–ï–ù–ò–õ–ò–°–¨
            var appliedConfig = validator.Configuration;
            Debug.Log("üìã –ü–†–û–í–ï–†–ö–ê –ü–†–ò–ú–ï–ù–ï–ù–ù–´–• –ù–ê–°–¢–†–û–ï–ö:");
            Debug.Log($"  - PreventObjectOverlap: {appliedConfig.PreventObjectOverlap}");
            Debug.Log($"  - UseStrictValidation: {appliedConfig.UseStrictValidation}");
            Debug.Log($"  - EnableLayerSystem: {appliedConfig.EnableLayerSystem}");
            Debug.Log($"  - CollisionCheckMask: {appliedConfig.CollisionCheckMask}");
            Debug.Log($"  - SurfaceCheckMask: {appliedConfig.SurfaceCheckMask}");
            
            // –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê
            if (!appliedConfig.PreventObjectOverlap)
            {
                Debug.LogError("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: PreventObjectOverlap –≤—Å–µ –µ—â–µ false!");
                Debug.LogError("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –∏–≥—Ä—É –∏–ª–∏ –ø–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å –≤–∞–ª–∏–¥–∞—Ç–æ—Ä!");
            }
            else
            {
                Debug.Log("‚úÖ PreventObjectOverlap —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ true!");
            }
            
            if (!appliedConfig.UseStrictValidation)
            {
                Debug.LogError("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: UseStrictValidation –≤—Å–µ –µ—â–µ false!");
            }
            else
            {
                Debug.Log("‚úÖ UseStrictValidation —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ true!");
            }
            
            Debug.Log("‚úÖ –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û!");
            Debug.Log("–¢–µ–ø–µ—Ä—å –ø—Ä–µ–¥–º–µ—Ç—ã –Ω–µ –¥–æ–ª–∂–Ω—ã –Ω–∞–∫–ª–∞–¥—ã–≤–∞—Ç—å—Å—è –¥—Ä—É–≥ –Ω–∞ –¥—Ä—É–≥–∞.");
        }
        
        [ContextMenu("üß™ –¢–ï–°–¢ –í–ê–õ–ò–î–ê–¶–ò–ò")]
        public void TestValidation()
        {
            Debug.Log("üß™ –¢–ï–°–¢ –í–ê–õ–ò–î–ê–¶–ò–ò –ü–û–°–õ–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø");
            
            var validator = FindFirstObjectByType<OptimizedItemPlacementValidator>();
            if (validator == null)
            {
                Debug.LogError("‚ùå –í–∞–ª–∏–¥–∞—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω!");
                return;
            }
            
            // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –ø—Ä–µ–¥–º–µ—Ç
            var testItem = InventorySystem.Factories.InventoryFactory.CreateTestItem();
            
            // –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–æ–∑–∏—Ü–∏—è—Ö
            Vector3[] testPositions = {
                Vector3.zero,
                new Vector3(1, 0, 1),
                new Vector3(-1, 0, -1)
            };
            
            foreach (var pos in testPositions)
            {
                var result = validator.CanPlaceItem(testItem, pos, Quaternion.identity);
                Debug.Log($"–ü–æ–∑–∏—Ü–∏—è {pos}: {result}");
            }
        }
        
        [ContextMenu("üìä –î–ï–¢–ê–õ–¨–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê")]
        public void DetailedDiagnostics()
        {
            Debug.Log("üìä –î–ï–¢–ê–õ–¨–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –í–ê–õ–ò–î–ê–¢–û–†–ê");
            
            var validator = FindFirstObjectByType<OptimizedItemPlacementValidator>();
            if (validator == null)
            {
                Debug.LogError("‚ùå –í–∞–ª–∏–¥–∞—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω!");
                return;
            }
            
            var config = validator.Configuration;
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –ø–æ–ª—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ reflection
            var fields = typeof(PlacementValidationConfig).GetFields(
                System.Reflection.BindingFlags.NonPublic | 
                System.Reflection.BindingFlags.Instance | 
                System.Reflection.BindingFlags.Public);
            
            Debug.Log("üìã –í–°–ï –ü–û–õ–Ø –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò:");
            foreach (var field in fields)
            {
                var value = field.GetValue(config);
                Debug.Log($"  - {field.Name}: {value}");
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–∞–ª–∏–¥–∞—Ç–æ—Ä –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —ç—Ç—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            var configField = typeof(BaseInventoryComponent<PlacementValidationConfig>).GetField("configuration", 
                System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance);
            
            if (configField != null)
            {
                var actualConfig = configField.GetValue(validator);
                Debug.Log($"–ê–∫—Ç–∏–≤–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: {actualConfig}");
                
                if (actualConfig != config)
                {
                    Debug.LogWarning("‚ö†Ô∏è –í–∞–ª–∏–¥–∞—Ç–æ—Ä –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –¥—Ä—É–≥—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é!");
                }
            }
        }
        
        private void SetConfigField(PlacementValidationConfig config, string fieldName, object value)
        {
            var field = typeof(PlacementValidationConfig).GetField(fieldName, 
                System.Reflection.BindingFlags.NonPublic | 
                System.Reflection.BindingFlags.Instance | 
                System.Reflection.BindingFlags.Public);
            
            if (field != null)
            {
                field.SetValue(config, value);
                Debug.Log($"‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ {fieldName} = {value}");
            }
            else
            {
                Debug.LogError($"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª–µ {fieldName}");
            }
        }
        
        private void SetValidatorConfig(OptimizedItemPlacementValidator validator, PlacementValidationConfig config)
        {
            var configField = typeof(BaseInventoryComponent<PlacementValidationConfig>).GetField("configuration", 
                System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance);
            
            if (configField != null)
            {
                configField.SetValue(validator, config);
                Debug.Log("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –≤ –≤–∞–ª–∏–¥–∞—Ç–æ—Ä");
            }
            else
            {
                Debug.LogError("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≤ –≤–∞–ª–∏–¥–∞—Ç–æ—Ä");
            }
        }
    }
}
