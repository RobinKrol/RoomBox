using UnityEngine;
using InventorySystem.OptimizedComponents;
using InventorySystem.Configuration;
using InventorySystem.BaseComponents;

namespace InventorySystem.Examples
{
    /// <summary>
    /// –ü–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–ª–æ–µ–≤ –∏ –º–∞—Å–æ–∫ –∫–æ–ª–ª–∏–∑–∏–π
    /// </summary>
    public class LayerSetupHelper : MonoBehaviour
    {
        [Header("–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ —Å–ª–æ–∏")]
        [SerializeField] private string staticEnvironmentLayer = "StaticEnvironment";
        [SerializeField] private string furnitureLayer = "Furniture";
        [SerializeField] private string ignoreCollisionLayer = "IgnoreCollision";
        [SerializeField] private string surfaceLayer = "Surface";
        
        [Header("–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")]
        [SerializeField] private LayerMask currentCollisionMask;
        [SerializeField] private LayerMask currentSurfaceMask;
        
        [ContextMenu("–°–æ–∑–¥–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ —Å–ª–æ–∏")]
        public void CreateRecommendedLayers()
        {
            Debug.Log("üìã –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ —Å–ª–æ–∏ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ Unity:");
            Debug.Log($"  - {staticEnvironmentLayer} (–¥–ª—è –ø–æ–ª–∞/—Å—Ç–µ–Ω)");
            Debug.Log($"  - {furnitureLayer} (–¥–ª—è –ø–µ—Ä–µ–º–µ—â–∞–µ–º—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤)");
            Debug.Log($"  - {ignoreCollisionLayer} (–¥–ª—è –¥–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤)");
            Debug.Log($"  - {surfaceLayer} (–¥–ª—è –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–µ–π - —Å—Ç–æ–ª–æ–≤, —Ç—É–º–±)");
            Debug.Log("");
            Debug.Log("‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –°–ª–æ–∏ –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –≤—Ä—É—á–Ω—É—é –≤ Unity:");
            Debug.Log("  1. Edit ‚Üí Project Settings ‚Üí Tags and Layers");
            Debug.Log("  2. –î–æ–±–∞–≤—å—Ç–µ —Å–ª–æ–∏ –≤ User Layers 8-31");
            Debug.Log("  3. –ù–∞–∑–Ω–∞—á—å—Ç–µ –æ–±—ä–µ–∫—Ç—ã –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ —Å–ª–æ–∏");
        }
        
        [ContextMenu("–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –º–∞—Å–∫–∏ –∫–æ–ª–ª–∏–∑–∏–π")]
        public void SetupCollisionMasks()
        {
            var validator = FindFirstObjectByType<OptimizedItemPlacementValidator>();
            if (validator == null)
            {
                Debug.LogError("OptimizedItemPlacementValidator –Ω–µ –Ω–∞–π–¥–µ–Ω!");
                return;
            }
            
            // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            var config = new PlacementValidationConfig();
            
            // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–∞—Å–∫—É –∫–æ–ª–ª–∏–∑–∏–π - –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –º–µ–±–µ–ª—å (–ø—Ä–µ–¥–º–µ—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –ø–µ—Ä–µ—Å–µ–∫–∞—Ç—å—Å—è)
            int furnitureLayerIndex = LayerMask.NameToLayer(furnitureLayer);
            
            if (furnitureLayerIndex == -1)
            {
                Debug.LogError($"–°–ª–æ–π {furnitureLayer} –Ω–µ –Ω–∞–π–¥–µ–Ω!");
                Debug.LogError("–°–æ–∑–¥–∞–π—Ç–µ —Å–ª–æ–∏ –≤—Ä—É—á–Ω—É—é –≤ Unity: Edit ‚Üí Project Settings ‚Üí Tags and Layers");
                return;
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ —Å–ª–æ–π Furniture –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–π
            LayerMask collisionMask = (1 << furnitureLayerIndex);
            currentCollisionMask = collisionMask;
            
            // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–∞—Å–∫—É –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–µ–π - –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏
            int surfaceLayerIndex = LayerMask.NameToLayer(surfaceLayer);
            LayerMask surfaceMask = surfaceLayerIndex != -1 ? (1 << surfaceLayerIndex) : (LayerMask)(-1);
            currentSurfaceMask = surfaceMask;
            
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —á–µ—Ä–µ–∑ reflection
            var collisionMaskField = typeof(PlacementValidationConfig).GetField("collisionCheckMask", 
                System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance);
            collisionMaskField?.SetValue(config, collisionMask);
            
            var surfaceMaskField = typeof(PlacementValidationConfig).GetField("surfaceCheckMask", 
                System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance);
            surfaceMaskField?.SetValue(config, surfaceMask);
            
            // –í–∫–ª—é—á–∞–µ–º –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–π
            var preventOverlapField = typeof(PlacementValidationConfig).GetField("preventObjectOverlap", 
                System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance);
            preventOverlapField?.SetValue(config, true);
            
            // –í–∫–ª—é—á–∞–µ–º —Å—Ç—Ä–æ–≥—É—é –≤–∞–ª–∏–¥–∞—Ü–∏—é
            var useStrictValidationField = typeof(PlacementValidationConfig).GetField("useStrictValidation", 
                System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance);
            useStrictValidationField?.SetValue(config, true);
            
            // –í–∫–ª—é—á–∞–µ–º —Å–∏—Å—Ç–µ–º—É —Å–ª–æ–µ–≤
            var enableLayerSystemField = typeof(PlacementValidationConfig).GetField("enableLayerSystem", 
                System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance);
            enableLayerSystemField?.SetValue(config, true);
            
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            var configField = typeof(BaseInventoryComponent<PlacementValidationConfig>).GetField("configuration", 
                System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance);
            configField?.SetValue(validator, config);
            
            Debug.Log("‚úÖ –ú–∞—Å–∫–∏ –∫–æ–ª–ª–∏–∑–∏–π –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã!");
            Debug.Log($"  CollisionCheckMask: {collisionMask} (—Å–ª–æ–π: {furnitureLayer})");
            Debug.Log($"  SurfaceCheckMask: {surfaceMask} (—Å–ª–æ–π: {surfaceLayer})");
            Debug.Log($"  PreventObjectOverlap: true");
            Debug.Log($"  UseStrictValidation: true");
            Debug.Log("üìù –õ–æ–≥–∏–∫–∞: –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –º–µ–∂–¥—É –æ–±—ä–µ–∫—Ç–∞–º–∏ –Ω–∞ —Å–ª–æ–µ Furniture");
        }
        
        [ContextMenu("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")]
        public void CheckCurrentSettings()
        {
            var validator = FindFirstObjectByType<OptimizedItemPlacementValidator>();
            if (validator == null)
            {
                Debug.LogError("OptimizedItemPlacementValidator –Ω–µ –Ω–∞–π–¥–µ–Ω!");
                return;
            }
            
            var config = validator.Configuration;
            Debug.Log($"üìã –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–∞:");
            Debug.Log($"  PreventObjectOverlap: {config.PreventObjectOverlap}");
            Debug.Log($"  UseStrictValidation: {config.UseStrictValidation}");
            Debug.Log($"  EnableLayerSystem: {config.EnableLayerSystem}");
            Debug.Log($"  CollisionCheckMask: {config.CollisionCheckMask}");
            Debug.Log($"  SurfaceCheckMask: {config.SurfaceCheckMask}");
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–∫–∏–µ —Å–ª–æ–∏ –≤–∫–ª—é—á–µ–Ω—ã –≤ –º–∞—Å–∫–∏
            Debug.Log($"  –°–ª–æ–∏ –≤ CollisionCheckMask:");
            for (int i = 0; i < 32; i++)
            {
                if (((1 << i) & config.CollisionCheckMask) != 0)
                {
                    string layerName = LayerMask.LayerToName(i);
                    Debug.Log($"    - {layerName} (–∏–Ω–¥–µ–∫—Å: {i})");
                }
            }
            
            Debug.Log($"  –°–ª–æ–∏ –≤ SurfaceCheckMask:");
            for (int i = 0; i < 32; i++)
            {
                if (((1 << i) & config.SurfaceCheckMask) != 0)
                {
                    string layerName = LayerMask.LayerToName(i);
                    Debug.Log($"    - {layerName} (–∏–Ω–¥–µ–∫—Å: {i})");
                }
            }
        }
        
        [ContextMenu("–ù–∞–∑–Ω–∞—á–∏—Ç—å —Å–ª–æ–∏ –æ–±—ä–µ–∫—Ç–∞–º –Ω–∞ —Å—Ü–µ–Ω–µ")]
        public void AssignLayersToSceneObjects()
        {
            Debug.Log("üîß –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ —Å–ª–æ–µ–≤ –æ–±—ä–µ–∫—Ç–∞–º –Ω–∞ —Å—Ü–µ–Ω–µ:");
            
            // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –æ–±—ä–µ–∫—Ç—ã —Å PlacementLayerComponent
            var placementComponents = FindObjectsByType<PlacementLayerComponent>(FindObjectsSortMode.None);
            Debug.Log($"–ù–∞–π–¥–µ–Ω–æ {placementComponents.Length} –æ–±—ä–µ–∫—Ç–æ–≤ —Å PlacementLayerComponent");
            
            foreach (var component in placementComponents)
            {
                string recommendedLayer = GetRecommendedLayer(component.PlacementLayer);
                string currentLayer = LayerMask.LayerToName(component.gameObject.layer);
                
                Debug.Log($"  {component.name}:");
                Debug.Log($"    - PlacementLayer: {component.PlacementLayer}");
                Debug.Log($"    - –¢–µ–∫—É—â–∏–π —Å–ª–æ–π: {currentLayer}");
                Debug.Log($"    - –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π —Å–ª–æ–π: {recommendedLayer}");
                
                if (currentLayer != recommendedLayer)
                {
                    Debug.Log($"    ‚ö†Ô∏è –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏–∑–º–µ–Ω–∏—Ç—å —Å–ª–æ–π –Ω–∞ {recommendedLayer}");
                }
            }
            
            // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –æ–±—ä–µ–∫—Ç—ã —Å –∫–æ–ª–ª–∞–π–¥–µ—Ä–∞–º–∏
            var colliders = FindObjectsByType<Collider>(FindObjectsSortMode.None);
            Debug.Log($"–ù–∞–π–¥–µ–Ω–æ {colliders.Length} –æ–±—ä–µ–∫—Ç–æ–≤ —Å –∫–æ–ª–ª–∞–π–¥–µ—Ä–∞–º–∏");
            
            int assignedCount = 0;
            foreach (var collider in colliders)
            {
                if (collider.GetComponent<PlacementLayerComponent>() == null)
                {
                    string currentLayer = LayerMask.LayerToName(collider.gameObject.layer);
                    if (currentLayer == "Default" || currentLayer == "")
                    {
                        Debug.Log($"  {collider.name}: —Å–ª–æ–π Default - —Ä–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞ {furnitureLayer}");
                        assignedCount++;
                    }
                }
            }
            
            if (assignedCount > 0)
            {
                Debug.Log($"‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–æ {assignedCount} –æ–±—ä–µ–∫—Ç–æ–≤ —Å –∫–æ–ª–ª–∞–π–¥–µ—Ä–∞–º–∏ –Ω–∞ —Å–ª–æ–µ Default");
                Debug.Log("–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –Ω–∞–∑–Ω–∞—á–∏—Ç—å –∏–º —Å–ª–æ–π Furniture –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã –∫–æ–ª–ª–∏–∑–∏–π");
            }
        }
        
        private string GetRecommendedLayer(PlacementLayer placementLayer)
        {
            switch (placementLayer)
            {
                case PlacementLayer.Floor: return staticEnvironmentLayer;
                case PlacementLayer.Surface: return surfaceLayer;
                case PlacementLayer.Item: return furnitureLayer;
                case PlacementLayer.Wall: return staticEnvironmentLayer;
                default: return "Default";
            }
        }
    }
}
