using UnityEngine;
using InventorySystem.OptimizedComponents;
using InventorySystem.Factories;

namespace InventorySystem.Diagnostics
{
    public class DebugValidator : MonoBehaviour
    {
        [ContextMenu("–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏")]
        public void QuickValidationTest()
        {
            UnityEngine.Debug.Log("=== –ë–´–°–¢–†–´–ô –¢–ï–°–¢ –í–ê–õ–ò–î–ê–¶–ò–ò ===");
            
            var validator = Object.FindFirstObjectByType<OptimizedItemPlacementValidator>();
            if (validator == null)
            {
                UnityEngine.Debug.LogError("‚ùå OptimizedItemPlacementValidator –Ω–µ –Ω–∞–π–¥–µ–Ω!");
                return;
            }
            
            // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –ø—Ä–µ–¥–º–µ—Ç
            var testItem = InventoryFactory.CreateTestItem();
            if (testItem == null)
            {
                UnityEngine.Debug.LogError("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π –ø—Ä–µ–¥–º–µ—Ç!");
                return;
            }
            
            // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ –Ω–∞ –ø–æ–ª—É
            Vector3 floorPosition = Vector3.up * 0.5f;
            bool canPlaceOnFloor = validator.CanPlaceItem(testItem, floorPosition, Quaternion.identity);
            UnityEngine.Debug.Log($"–†–∞–∑–º–µ—â–µ–Ω–∏–µ –Ω–∞ –ø–æ–ª—É (0, 0.5, 0): {(canPlaceOnFloor ? "‚úÖ –†–ê–ó–†–ï–®–ï–ù–û" : "‚ùå –ó–ê–ü–†–ï–©–ï–ù–û")}");
            
            // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ –≤ –≤–æ–∑–¥—É—Ö–µ
            Vector3 airPosition = Vector3.up * 2f;
            bool canPlaceInAir = validator.CanPlaceItem(testItem, airPosition, Quaternion.identity);
            UnityEngine.Debug.Log($"–†–∞–∑–º–µ—â–µ–Ω–∏–µ –≤ –≤–æ–∑–¥—É—Ö–µ (0, 2, 0): {(canPlaceInAir ? "‚úÖ –†–ê–ó–†–ï–®–ï–ù–û" : "‚ùå –ó–ê–ü–†–ï–©–ï–ù–û")}");
            
            // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ –Ω–∞ –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏
            var surfaceComponents = Object.FindObjectsByType<PlacementLayerComponent>(FindObjectsSortMode.None);
            if (surfaceComponents.Length > 0)
            {
                var surfaceComponent = surfaceComponents[0];
                Vector3 surfacePosition = surfaceComponent.GetSurfacePosition() + Vector3.up * 0.1f;
                bool canPlaceOnSurface = validator.CanPlaceItem(testItem, surfacePosition, Quaternion.identity);
                UnityEngine.Debug.Log($"–†–∞–∑–º–µ—â–µ–Ω–∏–µ –Ω–∞ –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏ {surfaceComponent.name}: {(canPlaceOnSurface ? "‚úÖ –†–ê–ó–†–ï–®–ï–ù–û" : "‚ùå –ó–ê–ü–†–ï–©–ï–ù–û")}");
                UnityEngine.Debug.Log($"  - –ü–æ–∑–∏—Ü–∏—è –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏: {surfaceComponent.GetSurfacePosition()}");
                UnityEngine.Debug.Log($"  - –¢–µ—Å—Ç–æ–≤–∞—è –ø–æ–∑–∏—Ü–∏—è: {surfacePosition}");
                UnityEngine.Debug.Log($"  - IsSurface: {surfaceComponent.IsSurface}");
                UnityEngine.Debug.Log($"  - PlacementLayer: {surfaceComponent.PlacementLayer}");
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            UnityEngine.Debug.Log($"Enable Layer System: {validator.Configuration.EnableLayerSystem}");
            UnityEngine.Debug.Log($"Surface Check Mask: {validator.Configuration.SurfaceCheckMask}");
            UnityEngine.Debug.Log($"Default Placement Layer: {validator.Configuration.DefaultPlacementLayer}");
            
            UnityEngine.Debug.Log("=== –¢–ï–°–¢ –ó–ê–í–ï–†–®–ï–ù ===");
        }
        
        [ContextMenu("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–∞")]
        public void CheckValidatorSettings()
        {
            UnityEngine.Debug.Log("=== –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê OPTIMIZED ITEM PLACEMENT VALIDATOR ===");
            
            var validator = Object.FindFirstObjectByType<OptimizedItemPlacementValidator>();
            if (validator == null)
            {
                UnityEngine.Debug.LogError("‚ùå OptimizedItemPlacementValidator –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å—Ü–µ–Ω–µ!");
                return;
            }
            
            UnityEngine.Debug.Log($"‚úÖ OptimizedItemPlacementValidator –Ω–∞–π–¥–µ–Ω: {validator.name}");
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            var config = validator.Configuration;
            UnityEngine.Debug.Log($"Enable Validation: {config.EnableValidation}");
            UnityEngine.Debug.Log($"Enable Layer System: {config.EnableLayerSystem}");
            UnityEngine.Debug.Log($"Surface Check Mask: {config.SurfaceCheckMask}");
            UnityEngine.Debug.Log($"Collision Check Mask: {config.CollisionCheckMask}");
            UnityEngine.Debug.Log($"Default Placement Layer: {config.DefaultPlacementLayer}");
            UnityEngine.Debug.Log($"Check Floor Bounds: {config.CheckFloorBounds}");
            UnityEngine.Debug.Log($"Prevent Object Overlap: {config.PreventObjectOverlap}");
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—Ä—É–≥–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
            var dragHandlers = Object.FindObjectsByType<InventorySlotDragHandler>(FindObjectsSortMode.None);
            UnityEngine.Debug.Log($"üìã –ù–∞–π–¥–µ–Ω–æ InventorySlotDragHandler: {dragHandlers.Length}");
            
            var placementComponents = Object.FindObjectsByType<PlacementLayerComponent>(FindObjectsSortMode.None);
            UnityEngine.Debug.Log($"üè∑Ô∏è –ù–∞–π–¥–µ–Ω–æ PlacementLayerComponent: {placementComponents.Length}");
            
            foreach (var component in placementComponents)
            {
                UnityEngine.Debug.Log($"  - {component.name}: Layer={component.PlacementLayer}, IsSurface={component.IsSurface}");
            }
            
            UnityEngine.Debug.Log("=== –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê ===");
        }
    }
} 