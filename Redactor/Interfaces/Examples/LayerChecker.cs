using UnityEngine;

namespace InventorySystem.Examples
{
    /// <summary>
    /// –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–ª–æ–µ–≤ –æ–±—ä–µ–∫—Ç–æ–≤
    /// </summary>
    public class LayerChecker : MonoBehaviour
    {
        [Header("–ù–∞—Å—Ç—Ä–æ–π–∫–∏")]
        [SerializeField] private string furnitureLayerName = "Furniture";
        [SerializeField] private string surfaceLayerName = "Surface";
        [SerializeField] private string staticEnvironmentLayerName = "StaticEnvironment";
        
        [ContextMenu("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–ª–æ–∏ –Ω–∞ —Å—Ü–µ–Ω–µ")]
        public void CheckSceneLayers()
        {
            Debug.Log("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–ª–æ–µ–≤ –Ω–∞ —Å—Ü–µ–Ω–µ:");
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Å–ª–æ–µ–≤
            int furnitureLayer = LayerMask.NameToLayer(furnitureLayerName);
            int surfaceLayer = LayerMask.NameToLayer(surfaceLayerName);
            int staticEnvLayer = LayerMask.NameToLayer(staticEnvironmentLayerName);
            
            Debug.Log($"–°–ª–æ–π {furnitureLayerName}: {(furnitureLayer != -1 ? $"‚úÖ –ù–∞–π–¥–µ–Ω (–∏–Ω–¥–µ–∫—Å: {furnitureLayer})" : "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω")}");
            Debug.Log($"–°–ª–æ–π {surfaceLayerName}: {(surfaceLayer != -1 ? $"‚úÖ –ù–∞–π–¥–µ–Ω (–∏–Ω–¥–µ–∫—Å: {surfaceLayer})" : "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω")}");
            Debug.Log($"–°–ª–æ–π {staticEnvironmentLayerName}: {(staticEnvLayer != -1 ? $"‚úÖ –ù–∞–π–¥–µ–Ω (–∏–Ω–¥–µ–∫—Å: {staticEnvLayer})" : "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω")}");
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—ä–µ–∫—Ç—ã —Å –∫–æ–ª–ª–∞–π–¥–µ—Ä–∞–º–∏
            var colliders = FindObjectsByType<Collider>(FindObjectsSortMode.None);
            Debug.Log($"\nüìã –ù–∞–π–¥–µ–Ω–æ {colliders.Length} –æ–±—ä–µ–∫—Ç–æ–≤ —Å –∫–æ–ª–ª–∞–π–¥–µ—Ä–∞–º–∏:");
            
            int defaultLayerCount = 0;
            int furnitureLayerCount = 0;
            int surfaceLayerCount = 0;
            int otherLayerCount = 0;
            
            foreach (var col in colliders)
            {
                string layerName = LayerMask.LayerToName(col.gameObject.layer);
                
                if (layerName == "Default")
                    defaultLayerCount++;
                else if (layerName == furnitureLayerName)
                    furnitureLayerCount++;
                else if (layerName == surfaceLayerName)
                    surfaceLayerCount++;
                else
                    otherLayerCount++;
            }
            
            Debug.Log($"  - Default: {defaultLayerCount}");
            Debug.Log($"  - {furnitureLayerName}: {furnitureLayerCount}");
            Debug.Log($"  - {surfaceLayerName}: {surfaceLayerCount}");
            Debug.Log($"  - –î—Ä—É–≥–∏–µ: {otherLayerCount}");
            
            if (defaultLayerCount > 0)
            {
                Debug.LogWarning($"‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–æ {defaultLayerCount} –æ–±—ä–µ–∫—Ç–æ–≤ –Ω–∞ —Å–ª–æ–µ Default!");
                Debug.LogWarning("–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –Ω–∞–∑–Ω–∞—á–∏—Ç—å –∏–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ —Å–ª–æ–∏ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã –∫–æ–ª–ª–∏–∑–∏–π.");
            }
        }
        
        [ContextMenu("–ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Å–ª–æ–∏ –¥–ª—è –æ–±—ä–µ–∫—Ç–æ–≤")]
        public void SetupObjectLayers()
        {
            Debug.Log("üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–ª–æ–µ–≤ –¥–ª—è –æ–±—ä–µ–∫—Ç–æ–≤:");
            
            int furnitureLayer = LayerMask.NameToLayer(furnitureLayerName);
            int surfaceLayer = LayerMask.NameToLayer(surfaceLayerName);
            
            if (furnitureLayer == -1)
            {
                Debug.LogError($"‚ùå –°–ª–æ–π {furnitureLayerName} –Ω–µ –Ω–∞–π–¥–µ–Ω! –°–æ–∑–¥–∞–π—Ç–µ –µ–≥–æ –≤ Unity: Edit ‚Üí Project Settings ‚Üí Tags and Layers");
                return;
            }
            
            // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –æ–±—ä–µ–∫—Ç—ã —Å PlacementLayerComponent
            var placementComponents = FindObjectsByType<PlacementLayerComponent>(FindObjectsSortMode.None);
            Debug.Log($"–ù–∞–π–¥–µ–Ω–æ {placementComponents.Length} –æ–±—ä–µ–∫—Ç–æ–≤ —Å PlacementLayerComponent");
            
            int configuredCount = 0;
            foreach (var component in placementComponents)
            {
                string currentLayer = LayerMask.LayerToName(component.gameObject.layer);
                string recommendedLayer = GetRecommendedLayer(component.PlacementLayer);
                
                if (currentLayer != recommendedLayer)
                {
                    int targetLayer = LayerMask.NameToLayer(recommendedLayer);
                    if (targetLayer != -1)
                    {
                        SetLayerRecursively(component.gameObject, targetLayer);
                        Debug.Log($"‚úÖ {component.name}: {currentLayer} ‚Üí {recommendedLayer}");
                        configuredCount++;
                    }
                }
            }
            
            Debug.Log($"–ù–∞—Å—Ç—Ä–æ–µ–Ω–æ {configuredCount} –æ–±—ä–µ–∫—Ç–æ–≤");
        }
        
        [ContextMenu("–ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Å–ª–æ–∏ –¥–ª—è –ø—Ä–µ—Ñ–∞–±–æ–≤")]
        public void SetupPrefabLayers()
        {
            Debug.Log("üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–ª–æ–µ–≤ –¥–ª—è –ø—Ä–µ—Ñ–∞–±–æ–≤:");
            Debug.Log("‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –°–ª–æ–∏ –ø—Ä–µ—Ñ–∞–±–æ–≤ –Ω—É–∂–Ω–æ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—Ç—å –≤—Ä—É—á–Ω—É—é –≤ Unity Editor!");
            Debug.Log("1. –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ—Ñ–∞–± –≤ Project window");
            Debug.Log("2. –í Inspector —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Layer:");
            Debug.Log($"   - –ü—Ä–µ—Ñ–∞–±—ã –ø—Ä–µ–¥–º–µ—Ç–æ–≤ ‚Üí {furnitureLayerName}");
            Debug.Log($"   - –ü—Ä–µ—Ñ–∞–±—ã –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–µ–π ‚Üí {surfaceLayerName}");
            Debug.Log("3. –ù–∞–∂–º–∏—Ç–µ 'Apply' –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π");
        }
        
        private string GetRecommendedLayer(PlacementLayer placementLayer)
        {
            switch (placementLayer)
            {
                case PlacementLayer.Floor: return staticEnvironmentLayerName;
                case PlacementLayer.Surface: return surfaceLayerName;
                case PlacementLayer.Item: return furnitureLayerName;
                case PlacementLayer.Wall: return staticEnvironmentLayerName;
                default: return "Default";
            }
        }
        
        private void SetLayerRecursively(GameObject obj, int newLayer)
        {
            if (obj == null) return;
            
            obj.layer = newLayer;
            
            foreach (Transform child in obj.transform)
            {
                SetLayerRecursively(child.gameObject, newLayer);
            }
        }
        
        private void OnDrawGizmosSelected()
        {
            // –†–∏—Å—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–ª–æ—è—Ö –≤ Scene view
            var colliders = FindObjectsByType<Collider>(FindObjectsSortMode.None);
            
            foreach (var col in colliders)
            {
                string layerName = LayerMask.LayerToName(col.gameObject.layer);
                Color gizmoColor = GetLayerColor(layerName);
                
                Gizmos.color = gizmoColor;
                Gizmos.DrawWireCube(col.bounds.center, col.bounds.size);
            }
        }
        
        private Color GetLayerColor(string layerName)
        {
            switch (layerName)
            {
                case "Furniture": return Color.blue;
                case "Surface": return Color.yellow;
                case "StaticEnvironment": return Color.green;
                case "Default": return Color.red;
                default: return Color.white;
            }
        }
    }
}

