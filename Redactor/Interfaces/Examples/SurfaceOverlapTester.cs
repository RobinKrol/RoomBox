using UnityEngine;
using InventorySystem.OptimizedComponents;
using InventorySystem.Configuration;

namespace InventorySystem.Examples
{
    /// <summary>
    /// –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç–µ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ª–æ–∂–µ–Ω–∏–π –º–µ–∂–¥—É –ø—Ä–µ–¥–º–µ—Ç–∞–º–∏ –Ω–∞ —Å–ª–æ–µ Surface
    /// </summary>
    public class SurfaceOverlapTester : MonoBehaviour
    {
        [Header("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")]
        [SerializeField] private Vector3 testPosition = Vector3.zero;
        [SerializeField] private float testRadius = 2f;
        
        [ContextMenu("üß™ –¢–ï–°–¢ –ù–ê–õ–û–ñ–ï–ù–ò–ô –ü–û–í–ï–†–•–ù–û–°–¢–ï–ô")]
        public void TestSurfaceOverlaps()
        {
            Debug.Log("üß™ –¢–ï–°–¢ –ù–ê–õ–û–ñ–ï–ù–ò–ô –ü–û–í–ï–†–•–ù–û–°–¢–ï–ô");
            Debug.Log("================================");
            
            // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–∞
            CheckValidatorSettings();
            
            // 2. –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –æ–±—ä–µ–∫—Ç—ã –Ω–∞ —Å–ª–æ–µ Surface
            FindSurfaceObjects();
            
            // 3. –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞–ª–æ–∂–µ–Ω–∏—è –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏
            TestOverlapsAtPosition();
            
            Debug.Log("‚úÖ –¢–ï–°–¢ –ó–ê–í–ï–†–®–ï–ù");
        }
        
        private void CheckValidatorSettings()
        {
            Debug.Log("üìã –ù–ê–°–¢–†–û–ô–ö–ò –í–ê–õ–ò–î–ê–¢–û–†–ê:");
            
            var validator = FindFirstObjectByType<OptimizedItemPlacementValidator>();
            if (validator == null)
            {
                Debug.LogError("‚ùå OptimizedItemPlacementValidator –Ω–µ –Ω–∞–π–¥–µ–Ω!");
                return;
            }
            
            var config = validator.Configuration;
            Debug.Log($"  - CollisionCheckMask: {config.CollisionCheckMask}");
            Debug.Log($"  - SurfaceCheckMask: {config.SurfaceCheckMask}");
            Debug.Log($"  - PreventObjectOverlap: {config.PreventObjectOverlap}");
            Debug.Log($"  - UseStrictValidation: {config.UseStrictValidation}");
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∫–ª—é—á–µ–Ω –ª–∏ —Å–ª–æ–π Surface –≤ CollisionCheckMask
            int surfaceLayer = LayerMask.NameToLayer("Surface");
            bool surfaceInCollisionMask = ((1 << surfaceLayer) & config.CollisionCheckMask) != 0;
            
            Debug.Log($"  - –°–ª–æ–π Surface –≤ CollisionCheckMask: {(surfaceInCollisionMask ? "‚úÖ –í–ö–õ–Æ–ß–ï–ù" : "‚ùå –ù–ï –í–ö–õ–Æ–ß–ï–ù")}");
            
            if (!surfaceInCollisionMask)
            {
                Debug.LogError("‚ùå –°–ª–æ–π Surface –ù–ï –≤–∫–ª—é—á–µ–Ω –≤ CollisionCheckMask!");
                Debug.LogError("–ü—Ä–µ–¥–º–µ—Ç—ã –Ω–∞ —Å–ª–æ–µ Surface –Ω–µ –±—É–¥—É—Ç –ø—Ä–æ–≤–µ—Ä—è—Ç—å—Å—è –Ω–∞ –Ω–∞–ª–æ–∂–µ–Ω–∏—è!");
            }
        }
        
        private void FindSurfaceObjects()
        {
            Debug.Log("üîç –ü–û–ò–°–ö –û–ë–™–ï–ö–¢–û–í –ù–ê –°–õ–û–ï SURFACE:");
            
            var colliders = FindObjectsByType<Collider>(FindObjectsSortMode.None);
            var surfaceObjects = new System.Collections.Generic.List<Collider>();
            
            foreach (var col in colliders)
            {
                if (col.gameObject.layer == LayerMask.NameToLayer("Surface"))
                {
                    surfaceObjects.Add(col);
                }
            }
            
            Debug.Log($"–ù–∞–π–¥–µ–Ω–æ {surfaceObjects.Count} –æ–±—ä–µ–∫—Ç–æ–≤ –Ω–∞ —Å–ª–æ–µ Surface:");
            
            foreach (var obj in surfaceObjects)
            {
                Debug.Log($"  üè† {obj.name} (–ø–æ–∑–∏—Ü–∏—è: {obj.transform.position})");
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ PlacementLayerComponent
                var placementComponent = obj.GetComponent<PlacementLayerComponent>();
                if (placementComponent != null)
                {
                    Debug.Log($"    - PlacementLayer: {placementComponent.PlacementLayer}");
                    Debug.Log($"    - IsSurface: {placementComponent.IsSurface}");
                }
                else
                {
                    Debug.Log($"    - PlacementLayerComponent: –ù–ï–¢");
                }
            }
        }
        
        private void TestOverlapsAtPosition()
        {
            Debug.Log($"üß™ –¢–ï–°–¢ –ù–ê–õ–û–ñ–ï–ù–ò–ô –í –ü–û–ó–ò–¶–ò–ò {testPosition}:");
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–ª–∏–∑–∏–∏ —Å –º–∞—Å–∫–æ–π Furniture + Surface
            int furnitureLayer = LayerMask.NameToLayer("Furniture");
            int surfaceLayer = LayerMask.NameToLayer("Surface");
            LayerMask testMask = (1 << furnitureLayer) | (1 << surfaceLayer);
            
            var colliders = Physics.OverlapSphere(testPosition, testRadius, testMask);
            Debug.Log($"–ù–∞–π–¥–µ–Ω–æ {colliders.Length} –æ–±—ä–µ–∫—Ç–æ–≤ –≤ —Ä–∞–¥–∏—É—Å–µ {testRadius} (–º–∞—Å–∫–∞: Furniture + Surface)");
            
            int furnitureCount = 0;
            int surfaceCount = 0;
            
            foreach (var col in colliders)
            {
                string layerName = LayerMask.LayerToName(col.gameObject.layer);
                float distance = Vector3.Distance(testPosition, col.bounds.center);
                
                Debug.Log($"  üìç {col.name} (—Å–ª–æ–π: {layerName}, —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ: {distance:F2})");
                
                if (layerName == "Furniture")
                {
                    furnitureCount++;
                    Debug.Log($"    ‚ùå –ü–û–¢–ï–ù–¶–ò–ê–õ–¨–ù–û–ï –ù–ê–õ–û–ñ–ï–ù–ò–ï —Å –ø—Ä–µ–¥–º–µ—Ç–æ–º Furniture!");
                }
                else if (layerName == "Surface")
                {
                    surfaceCount++;
                    Debug.Log($"    ‚ùå –ü–û–¢–ï–ù–¶–ò–ê–õ–¨–ù–û–ï –ù–ê–õ–û–ñ–ï–ù–ò–ï —Å –ø—Ä–µ–¥–º–µ—Ç–æ–º Surface!");
                }
            }
            
            Debug.Log($"–ò–¢–û–ì–û:");
            Debug.Log($"  - –ü—Ä–µ–¥–º–µ—Ç—ã Furniture: {furnitureCount}");
            Debug.Log($"  - –ü—Ä–µ–¥–º–µ—Ç—ã Surface: {surfaceCount}");
            
            if (furnitureCount + surfaceCount > 1)
            {
                Debug.LogWarning($"‚ö†Ô∏è –û–ë–ù–ê–†–£–ñ–ï–ù–û –ü–û–¢–ï–ù–¶–ò–ê–õ–¨–ù–û–ï –ù–ê–õ–û–ñ–ï–ù–ò–ï!");
                Debug.LogWarning($"–í —Ä–∞–¥–∏—É—Å–µ {testRadius} –Ω–∞–π–¥–µ–Ω–æ {furnitureCount + surfaceCount} –ø—Ä–µ–¥–º–µ—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –¥–æ–ª–∂–Ω—ã –ø–µ—Ä–µ—Å–µ–∫–∞—Ç—å—Å—è.");
            }
            else
            {
                Debug.Log("‚úÖ –ù–∞–ª–æ–∂–µ–Ω–∏–π –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ");
            }
        }
        
        [ContextMenu("üîß –ë–´–°–¢–†–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï")]
        public void QuickFix()
        {
            var quickFix = FindFirstObjectByType<QuickFixOverlap>();
            if (quickFix != null)
            {
                quickFix.QuickFixOverlapIssue();
                Debug.Log("‚úÖ –ë—ã—Å—Ç—Ä–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–æ!");
                Debug.Log("–¢–µ–ø–µ—Ä—å —Å–ª–æ–π Surface –≤–∫–ª—é—á–µ–Ω –≤ CollisionCheckMask");
            }
            else
            {
                Debug.LogError("‚ùå QuickFixOverlap –Ω–µ –Ω–∞–π–¥–µ–Ω! –î–æ–±–∞–≤—å—Ç–µ –µ–≥–æ –Ω–∞ —Å—Ü–µ–Ω—É.");
            }
        }
        
        [ContextMenu("üìä –ü–†–û–í–ï–†–ò–¢–¨ –ù–ê–°–¢–†–û–ô–ö–ò")]
        public void CheckSettings()
        {
            var quickFix = FindFirstObjectByType<QuickFixOverlap>();
            if (quickFix != null)
            {
                quickFix.CheckCurrentSettings();
            }
            else
            {
                Debug.LogError("‚ùå QuickFixOverlap –Ω–µ –Ω–∞–π–¥–µ–Ω!");
            }
        }
        
        private void OnDrawGizmos()
        {
            // –†–∏—Å—É–µ–º —Å—Ñ–µ—Ä—É —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            Gizmos.color = Color.yellow;
            Gizmos.DrawWireSphere(testPosition, testRadius);
            
            // –†–∏—Å—É–µ–º –æ–±—ä–µ–∫—Ç—ã –Ω–∞ —Å–ª–æ–µ Surface
            var colliders = FindObjectsByType<Collider>(FindObjectsSortMode.None);
            foreach (var col in colliders)
            {
                if (col.gameObject.layer == LayerMask.NameToLayer("Surface"))
                {
                    Gizmos.color = Color.blue;
                    Gizmos.DrawWireCube(col.bounds.center, col.bounds.size);
                }
                else if (col.gameObject.layer == LayerMask.NameToLayer("Furniture"))
                {
                    Gizmos.color = Color.red;
                    Gizmos.DrawWireCube(col.bounds.center, col.bounds.size);
                }
            }
        }
    }
}
