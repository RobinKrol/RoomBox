using UnityEngine;
using InventorySystem.OptimizedComponents;
using InventorySystem.Configuration;
using InventorySystem.BaseComponents;

namespace InventorySystem.Examples
{
    /// <summary>
    /// –ë—ã—Å—Ç—Ä–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–π –ø—Ä–µ–¥–º–µ—Ç–æ–≤
    /// </summary>
    public class QuickValidatorSetup : MonoBehaviour
    {
        [ContextMenu("–í–∫–ª—é—á–∏—Ç—å –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–π")]
        public void EnableOverlapPrevention()
        {
            var validator = FindFirstObjectByType<OptimizedItemPlacementValidator>();
            if (validator == null)
            {
                Debug.LogError("OptimizedItemPlacementValidator –Ω–µ –Ω–∞–π–¥–µ–Ω!");
                return;
            }
            
            // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å –≤–∫–ª—é—á–µ–Ω–Ω—ã–º –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ–º –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–π
            var config = new PlacementValidationConfig();
            
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —á–µ—Ä–µ–∑ reflection
            var preventOverlapField = typeof(PlacementValidationConfig).GetField("preventObjectOverlap", 
                System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance);
            preventOverlapField?.SetValue(config, true);
            
            var collisionRadiusField = typeof(PlacementValidationConfig).GetField("collisionCheckRadius", 
                System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance);
            collisionRadiusField?.SetValue(config, 0.5f);
            
            // –í–∫–ª—é—á–∞–µ–º —Å–∏—Å—Ç–µ–º—É —Å–ª–æ–µ–≤ –¥–ª—è –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–µ–π
            var enableLayerSystemField = typeof(PlacementValidationConfig).GetField("enableLayerSystem", 
                System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance);
            enableLayerSystemField?.SetValue(config, true);
            
            // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–∞—Å–∫—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–µ–π
            var surfaceCheckMaskField = typeof(PlacementValidationConfig).GetField("surfaceCheckMask", 
                System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance);
            surfaceCheckMaskField?.SetValue(config, (LayerMask)(-1)); // –í—Å–µ —Å–ª–æ–∏
            
            // –í–∫–ª—é—á–∞–µ–º —Å—Ç—Ä–æ–≥—É—é –≤–∞–ª–∏–¥–∞—Ü–∏—é –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–π
            var useStrictValidationField = typeof(PlacementValidationConfig).GetField("useStrictValidation", 
                System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance);
            useStrictValidationField?.SetValue(config, true);
            
            var configField = typeof(BaseInventoryComponent<PlacementValidationConfig>).GetField("configuration", 
                System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance);
            configField?.SetValue(validator, config);
            
            Debug.Log("‚úÖ –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–π –≤–∫–ª—é—á–µ–Ω–æ!");
            Debug.Log("‚úÖ –°–∏—Å—Ç–µ–º–∞ –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–µ–π –≤–∫–ª—é—á–µ–Ω–∞!");
        }
        
        [ContextMenu("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")]
        public void CheckSettings()
        {
            var validator = FindFirstObjectByType<OptimizedItemPlacementValidator>();
            if (validator == null)
            {
                Debug.LogError("OptimizedItemPlacementValidator –Ω–µ –Ω–∞–π–¥–µ–Ω!");
                return;
            }
            
            var config = validator.Configuration;
            Debug.Log($"üìã –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏:");
            Debug.Log($"   PreventObjectOverlap: {config.PreventObjectOverlap}");
            Debug.Log($"   CollisionCheckRadius: {config.CollisionCheckRadius}");
            Debug.Log($"   EnableValidation: {config.EnableValidation}");
            Debug.Log($"   UseStrictValidation: {config.UseStrictValidation}");
            Debug.Log($"   EnableLayerSystem: {config.EnableLayerSystem}");
            Debug.Log($"   SurfaceCheckMask: {config.SurfaceCheckMask}");
        }
        
        [ContextMenu("–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–∏—Å—Ç–µ–º—É –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–µ–π")]
        public void RestoreSurfaceSystem()
        {
            var validator = FindFirstObjectByType<OptimizedItemPlacementValidator>();
            if (validator == null)
            {
                Debug.LogError("OptimizedItemPlacementValidator –Ω–µ –Ω–∞–π–¥–µ–Ω!");
                return;
            }
            
            // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å –ø–æ–ª–Ω–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–µ–π
            var config = new PlacementValidationConfig();
            
            // –í–∫–ª—é—á–∞–µ–º –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            var enableLayerSystemField = typeof(PlacementValidationConfig).GetField("enableLayerSystem", 
                System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance);
            enableLayerSystemField?.SetValue(config, true);
            
            var surfaceCheckMaskField = typeof(PlacementValidationConfig).GetField("surfaceCheckMask", 
                System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance);
            surfaceCheckMaskField?.SetValue(config, (LayerMask)(-1));
            
            var preventOverlapField = typeof(PlacementValidationConfig).GetField("preventObjectOverlap", 
                System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance);
            preventOverlapField?.SetValue(config, true);
            
            // –í–∫–ª—é—á–∞–µ–º —Å—Ç—Ä–æ–≥—É—é –≤–∞–ª–∏–¥–∞—Ü–∏—é –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–π
            var useStrictValidationField = typeof(PlacementValidationConfig).GetField("useStrictValidation", 
                System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance);
            useStrictValidationField?.SetValue(config, true);
            
            var configField = typeof(BaseInventoryComponent<PlacementValidationConfig>).GetField("configuration", 
                System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance);
            configField?.SetValue(validator, config);
            
            Debug.Log("‚úÖ –°–∏—Å—Ç–µ–º–∞ –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–µ–π –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!");
            Debug.Log("‚úÖ –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–π –≤–∫–ª—é—á–µ–Ω–æ!");
        }
    }
}
