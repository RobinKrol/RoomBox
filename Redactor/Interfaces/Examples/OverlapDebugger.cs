using UnityEngine;
using InventorySystem.OptimizedComponents;
using InventorySystem.Configuration;
using InventorySystem.BaseComponents;

namespace InventorySystem.Examples
{
    /// <summary>
    /// –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –Ω–∞–ª–æ–∂–µ–Ω–∏–π –ø—Ä–µ–¥–º–µ—Ç–æ–≤
    /// </summary>
    public class OverlapDebugger : MonoBehaviour
    {
        [Header("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏")]
        [SerializeField] private Vector3 testPosition = Vector3.zero;
        [SerializeField] private float testRadius = 1f;
        [SerializeField] private bool showGizmos = true;
        
        [ContextMenu("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ù–ê–õ–û–ñ–ï–ù–ò–ô")]
        public void DebugOverlaps()
        {
            Debug.Log("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ù–ê–õ–û–ñ–ï–ù–ò–ô –ü–†–ï–î–ú–ï–¢–û–í");
            Debug.Log("=====================================");
            
            // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–∞
            CheckValidatorSettings();
            
            // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—ä–µ–∫—Ç—ã –Ω–∞ —Å—Ü–µ–Ω–µ
            CheckSceneObjects();
            
            // 3. –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞–ª–æ–∂–µ–Ω–∏—è –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏
            TestOverlapAtPosition();
            
            // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∞–ª—å–Ω—É—é —Ä–∞–±–æ—Ç—É –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–∞
            TestValidatorWork();
            
            Debug.Log("‚úÖ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê");
        }
        
        private void CheckValidatorSettings()
        {
            Debug.Log("üìã –ü–†–û–í–ï–†–ö–ê –ù–ê–°–¢–†–û–ï–ö –í–ê–õ–ò–î–ê–¢–û–†–ê:");
            
            var validator = FindFirstObjectByType<OptimizedItemPlacementValidator>();
            if (validator == null)
            {
                Debug.LogError("‚ùå OptimizedItemPlacementValidator –Ω–µ –Ω–∞–π–¥–µ–Ω!");
                return;
            }
            
            var config = validator.Configuration;
            Debug.Log($"  - PreventObjectOverlap: {config.PreventObjectOverlap}");
            Debug.Log($"  - UseStrictValidation: {config.UseStrictValidation}");
            Debug.Log($"  - EnableLayerSystem: {config.EnableLayerSystem}");
            Debug.Log($"  - CollisionCheckMask: {config.CollisionCheckMask}");
            Debug.Log($"  - SurfaceCheckMask: {config.SurfaceCheckMask}");
            Debug.Log($"  - CollisionCheckRadius: {config.CollisionCheckRadius}");
            Debug.Log($"  - OverlapCheckMargin: {config.OverlapCheckMargin}");
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–∫–∏–µ —Å–ª–æ–∏ –≤–∫–ª—é—á–µ–Ω—ã –≤ –º–∞—Å–∫–∏
            Debug.Log($"  –°–ª–æ–∏ –≤ CollisionCheckMask:");
            for (int i = 0; i < 32; i++)
            {
                if (((1 << i) & config.CollisionCheckMask) != 0)
                {
                    string layerName = LayerMask.LayerToName(i);
                    Debug.Log($"    - {layerName} (–∏–Ω–¥–µ–∫—Å: {i})");
                }
            }
            
            Debug.Log($"  –°–ª–æ–∏ –≤ SurfaceCheckMask:");
            for (int i = 0; i < 32; i++)
            {
                if (((1 << i) & config.SurfaceCheckMask) != 0)
                {
                    string layerName = LayerMask.LayerToName(i);
                    Debug.Log($"    - {layerName} (–∏–Ω–¥–µ–∫—Å: {i})");
                }
            }
            
            // –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê
            if (!config.PreventObjectOverlap)
            {
                Debug.LogError("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: PreventObjectOverlap = false!");
                Debug.LogError("–≠—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –Ω–∞–ª–æ–∂–µ–Ω–∏—è –ù–ï –ü–†–ï–î–û–¢–í–†–ê–©–ê–Æ–¢–°–Ø!");
            }
            
            if (!config.UseStrictValidation)
            {
                Debug.LogError("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: UseStrictValidation = false!");
                Debug.LogError("–≠—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ —Å—Ç—Ä–æ–≥–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –û–¢–ö–õ–Æ–ß–ï–ù–ê!");
            }
        }
        
        private void CheckSceneObjects()
        {
            Debug.Log("üìã –ü–†–û–í–ï–†–ö–ê –û–ë–™–ï–ö–¢–û–í –ù–ê –°–¶–ï–ù–ï:");
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –æ–±—ä–µ–∫—Ç—ã —Å –∫–æ–ª–ª–∞–π–¥–µ—Ä–∞–º–∏
            var colliders = FindObjectsByType<Collider>(FindObjectsSortMode.None);
            Debug.Log($"–ù–∞–π–¥–µ–Ω–æ {colliders.Length} –æ–±—ä–µ–∫—Ç–æ–≤ —Å –∫–æ–ª–ª–∞–π–¥–µ—Ä–∞–º–∏");
            
            int furnitureCount = 0;
            int surfaceCount = 0;
            int staticEnvCount = 0;
            int defaultCount = 0;
            int otherCount = 0;
            
            foreach (var col in colliders)
            {
                string layerName = LayerMask.LayerToName(col.gameObject.layer);
                
                switch (layerName)
                {
                    case "Furniture":
                        furnitureCount++;
                        Debug.Log($"  ü™ë {col.name} (Furniture)");
                        break;
                    case "Surface":
                        surfaceCount++;
                        Debug.Log($"  üè† {col.name} (Surface)");
                        break;
                    case "StaticEnvironment":
                        staticEnvCount++;
                        Debug.Log($"  üè¢ {col.name} (StaticEnvironment)");
                        break;
                    case "Default":
                        defaultCount++;
                        Debug.Log($"  ‚ö†Ô∏è {col.name} (Default) - –†–ï–ö–û–ú–ï–ù–î–£–ï–¢–°–Ø –ò–ó–ú–ï–ù–ò–¢–¨ –°–õ–û–ô!");
                        break;
                    default:
                        otherCount++;
                        Debug.Log($"  ‚ùì {col.name} ({layerName})");
                        break;
                }
            }
            
            Debug.Log($"–ò–¢–û–ì–û:");
            Debug.Log($"  - Furniture: {furnitureCount}");
            Debug.Log($"  - Surface: {surfaceCount}");
            Debug.Log($"  - StaticEnvironment: {staticEnvCount}");
            Debug.Log($"  - Default: {defaultCount} ‚ö†Ô∏è");
            Debug.Log($"  - –î—Ä—É–≥–∏–µ: {otherCount}");
            
            if (defaultCount > 0)
            {
                Debug.LogWarning($"‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–æ {defaultCount} –æ–±—ä–µ–∫—Ç–æ–≤ –Ω–∞ —Å–ª–æ–µ Default!");
                Debug.LogWarning("–û–±—ä–µ–∫—Ç—ã –Ω–∞ —Å–ª–æ–µ Default –º–æ–≥—É—Ç –º–µ—à–∞—Ç—å —Ä–∞–∑–º–µ—â–µ–Ω–∏—é –ø—Ä–µ–¥–º–µ—Ç–æ–≤.");
                Debug.LogWarning("–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –Ω–∞–∑–Ω–∞—á–∏—Ç—å –∏–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ —Å–ª–æ–∏.");
            }
        }
        
        private void TestOverlapAtPosition()
        {
            Debug.Log($"üß™ –¢–ï–°–¢ –ù–ê–õ–û–ñ–ï–ù–ò–ô –í –ü–û–ó–ò–¶–ò–ò {testPosition}:");
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–ª–∏–∑–∏–∏ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏
            var colliders = Physics.OverlapSphere(testPosition, testRadius);
            Debug.Log($"–ù–∞–π–¥–µ–Ω–æ {colliders.Length} –æ–±—ä–µ–∫—Ç–æ–≤ –≤ —Ä–∞–¥–∏—É—Å–µ {testRadius}");
            
            foreach (var col in colliders)
            {
                string layerName = LayerMask.LayerToName(col.gameObject.layer);
                float distance = Vector3.Distance(testPosition, col.bounds.center);
                
                Debug.Log($"  üìç {col.name} (—Å–ª–æ–π: {layerName}, —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ: {distance:F2})");
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—É–¥–µ—Ç –ª–∏ —ç—Ç–æ –Ω–∞–ª–æ–∂–µ–Ω–∏–µ
                if (layerName == "Furniture")
                {
                    Debug.Log($"    ‚ùå –ü–û–¢–ï–ù–¶–ò–ê–õ–¨–ù–û–ï –ù–ê–õ–û–ñ–ï–ù–ò–ï —Å –ø—Ä–µ–¥–º–µ—Ç–æ–º –Ω–∞ —Å–ª–æ–µ Furniture!");
                }
                else if (layerName == "Surface")
                {
                    Debug.Log($"    ‚ùå –ü–û–¢–ï–ù–¶–ò–ê–õ–¨–ù–û–ï –ù–ê–õ–û–ñ–ï–ù–ò–ï —Å –ø—Ä–µ–¥–º–µ—Ç–æ–º –Ω–∞ —Å–ª–æ–µ Surface!");
                }
                else if (layerName == "StaticEnvironment")
                {
                    Debug.Log($"    ‚úÖ –ü–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç—å - –Ω–µ –º–µ—à–∞–µ—Ç —Ä–∞–∑–º–µ—â–µ–Ω–∏—é");
                }
                else
                {
                    Debug.Log($"    ‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å–ª–æ–π - –º–æ–∂–µ—Ç –º–µ—à–∞—Ç—å");
                }
            }
        }
        
        private void TestValidatorWork()
        {
            Debug.Log("üß™ –¢–ï–°–¢ –†–ê–ë–û–¢–´ –í–ê–õ–ò–î–ê–¢–û–†–ê:");
            
            var validator = FindFirstObjectByType<OptimizedItemPlacementValidator>();
            if (validator == null)
            {
                Debug.LogError("‚ùå –í–∞–ª–∏–¥–∞—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω!");
                return;
            }
            
            // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –ø—Ä–µ–¥–º–µ—Ç
            var testItem = InventorySystem.Factories.InventoryFactory.CreateTestItem();
            
            // –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤ –ø–æ–∑–∏—Ü–∏–∏, –≥–¥–µ –µ—Å—Ç—å –Ω–∞–ª–æ–∂–µ–Ω–∏—è
            var result = validator.CanPlaceItem(testItem, testPosition, Quaternion.identity);
            
            Debug.Log($"–†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤ –ø–æ–∑–∏—Ü–∏–∏ {testPosition}: {result}");
            
            if (result)
            {
                Debug.LogWarning("‚ö†Ô∏è –í–ê–õ–ò–î–ê–¢–û–† –†–ê–ó–†–ï–®–ê–ï–¢ –†–ê–ó–ú–ï–©–ï–ù–ò–ï –í –ó–û–ù–ï –ù–ê–õ–û–ñ–ï–ù–ò–ô!");
                Debug.LogWarning("–≠—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ PreventObjectOverlap –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç!");
            }
            else
            {
                Debug.Log("‚úÖ –í–∞–ª–∏–¥–∞—Ç–æ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∑–∞–ø—Ä–µ—â–∞–µ—Ç —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ –≤ –∑–æ–Ω–µ –Ω–∞–ª–æ–∂–µ–Ω–∏–π");
            }
        }
        
        [ContextMenu("üîß –ë–´–°–¢–†–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï")]
        public void QuickFix()
        {
            var quickFix = FindFirstObjectByType<QuickFixOverlap>();
            if (quickFix != null)
            {
                quickFix.QuickFixOverlapIssue();
            }
            else
            {
                Debug.LogError("‚ùå QuickFixOverlap –Ω–µ –Ω–∞–π–¥–µ–Ω! –î–æ–±–∞–≤—å—Ç–µ –µ–≥–æ –Ω–∞ —Å—Ü–µ–Ω—É.");
            }
        }
        
        [ContextMenu("üìä –ü–†–û–í–ï–†–ò–¢–¨ –ù–ê–°–¢–†–û–ô–ö–ò")]
        public void CheckSettings()
        {
            var quickFix = FindFirstObjectByType<QuickFixOverlap>();
            if (quickFix != null)
            {
                quickFix.CheckCurrentSettings();
            }
            else
            {
                Debug.LogError("‚ùå QuickFixOverlap –Ω–µ –Ω–∞–π–¥–µ–Ω!");
            }
        }
        
        [ContextMenu("üö® –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï")]
        public void ForceFix()
        {
            Debug.Log("üö® –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ù–ê–°–¢–†–û–ï–ö");
            
            var validator = FindFirstObjectByType<OptimizedItemPlacementValidator>();
            if (validator == null)
            {
                Debug.LogError("‚ùå –í–∞–ª–∏–¥–∞—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω!");
                return;
            }
            
            // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —á–µ—Ä–µ–∑ reflection
            var configType = typeof(PlacementValidationConfig);
            var config = new PlacementValidationConfig();
            
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            SetField(config, "preventObjectOverlap", true);
            SetField(config, "useStrictValidation", true);
            SetField(config, "enableLayerSystem", true);
            
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–∞—Å–∫–∏
            int furnitureLayer = LayerMask.NameToLayer("Furniture");
            int surfaceLayer = LayerMask.NameToLayer("Surface");
            int staticEnvLayer = LayerMask.NameToLayer("StaticEnvironment");
            
            LayerMask collisionMask = (1 << furnitureLayer) | (1 << surfaceLayer);
            LayerMask surfaceMask = (1 << surfaceLayer) | (1 << staticEnvLayer);
            
            SetField(config, "collisionCheckMask", collisionMask);
            SetField(config, "surfaceCheckMask", surfaceMask);
            
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≤ –≤–∞–ª–∏–¥–∞—Ç–æ—Ä
            var configField = typeof(BaseInventoryComponent<PlacementValidationConfig>).GetField("configuration", 
                System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance);
            configField?.SetValue(validator, config);
            
            Debug.Log("‚úÖ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–æ!");
            Debug.Log($"  - PreventObjectOverlap: true");
            Debug.Log($"  - UseStrictValidation: true");
            Debug.Log($"  - CollisionCheckMask: {collisionMask}");
            Debug.Log($"  - SurfaceCheckMask: {surfaceMask}");
        }
        
        private void SetField(object obj, string fieldName, object value)
        {
            var field = obj.GetType().GetField(fieldName, 
                System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance | 
                System.Reflection.BindingFlags.Public);
            field?.SetValue(obj, value);
        }
        
        private void OnDrawGizmos()
        {
            if (!showGizmos) return;
            
            // –†–∏—Å—É–µ–º —Å—Ñ–µ—Ä—É —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            Gizmos.color = Color.yellow;
            Gizmos.DrawWireSphere(testPosition, testRadius);
            
            // –†–∏—Å—É–µ–º –≤—Å–µ –æ–±—ä–µ–∫—Ç—ã —Å –∫–æ–ª–ª–∞–π–¥–µ—Ä–∞–º–∏
            var colliders = FindObjectsByType<Collider>(FindObjectsSortMode.None);
            foreach (var col in colliders)
            {
                string layerName = LayerMask.LayerToName(col.gameObject.layer);
                
                switch (layerName)
                {
                    case "Furniture":
                        Gizmos.color = Color.red;
                        break;
                    case "Surface":
                        Gizmos.color = Color.blue;
                        break;
                    case "StaticEnvironment":
                        Gizmos.color = Color.green;
                        break;
                    case "Default":
                        Gizmos.color = Color.magenta;
                        break;
                    default:
                        Gizmos.color = Color.white;
                        break;
                }
                
                Gizmos.DrawWireCube(col.bounds.center, col.bounds.size);
            }
        }
    }
}
