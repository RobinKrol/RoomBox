using UnityEngine;
using InventorySystem.OptimizedComponents;
using InventorySystem.Configuration;

namespace InventorySystem.Examples
{
    /// <summary>
    /// –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–π –ø—Ä–µ–¥–º–µ—Ç–æ–≤
    /// </summary>
    public class OverlapTest : MonoBehaviour
    {
        [Header("–¢–µ—Å—Ç–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")]
        [SerializeField] private Vector3 testPosition = Vector3.zero;
        [SerializeField] private float testRadius = 1f;
        [SerializeField] private LayerMask testMask = -1;
        
        [ContextMenu("–¢–µ—Å—Ç –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–π –≤ –ø–æ–∑–∏—Ü–∏–∏")]
        public void TestOverlapAtPosition()
        {
            var validator = FindFirstObjectByType<OptimizedItemPlacementValidator>();
            if (validator == null)
            {
                Debug.LogError("OptimizedItemPlacementValidator –Ω–µ –Ω–∞–π–¥–µ–Ω!");
                return;
            }
            
            Debug.Log($"üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è –≤ –ø–æ–∑–∏—Ü–∏–∏ {testPosition}");
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–ª–∏–∑–∏–∏ —Å—Ñ–µ—Ä–æ–π
            var sphereColliders = Physics.OverlapSphere(testPosition, testRadius, testMask);
            Debug.Log($"–ù–∞–π–¥–µ–Ω–æ –∫–æ–ª–ª–∞–π–¥–µ—Ä–æ–≤ —Å—Ñ–µ—Ä–æ–π: {sphereColliders.Length}");
            foreach (var col in sphereColliders)
            {
                Debug.Log($"  - {col.name} (—Å–ª–æ–π: {LayerMask.LayerToName(col.gameObject.layer)})");
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–ª–∏–∑–∏–∏ –±–æ–∫—Å–æ–º
            var boxColliders = Physics.OverlapBox(testPosition, Vector3.one * 0.5f, Quaternion.identity, testMask);
            Debug.Log($"–ù–∞–π–¥–µ–Ω–æ –∫–æ–ª–ª–∞–π–¥–µ—Ä–æ–≤ –±–æ–∫—Å–æ–º: {boxColliders.Length}");
            foreach (var col in boxColliders)
            {
                Debug.Log($"  - {col.name} (—Å–ª–æ–π: {LayerMask.LayerToName(col.gameObject.layer)})");
            }
        }
        
        [ContextMenu("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–∞")]
        public void CheckValidatorSettings()
        {
            var validator = FindFirstObjectByType<OptimizedItemPlacementValidator>();
            if (validator == null)
            {
                Debug.LogError("OptimizedItemPlacementValidator –Ω–µ –Ω–∞–π–¥–µ–Ω!");
                return;
            }
            
            var config = validator.Configuration;
            Debug.Log($"üìã –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–∞:");
            Debug.Log($"  PreventObjectOverlap: {config.PreventObjectOverlap}");
            Debug.Log($"  CollisionCheckRadius: {config.CollisionCheckRadius}");
            Debug.Log($"  CollisionCheckMask: {config.CollisionCheckMask}");
            Debug.Log($"  EnableValidation: {config.EnableValidation}");
            Debug.Log($"  UseStrictValidation: {config.UseStrictValidation}");
        }
        
        [ContextMenu("–¢–µ—Å—Ç —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–∞")]
        public void TestItemPlacement()
        {
            var validator = FindFirstObjectByType<OptimizedItemPlacementValidator>();
            if (validator == null)
            {
                Debug.LogError("OptimizedItemPlacementValidator –Ω–µ –Ω–∞–π–¥–µ–Ω!");
                return;
            }
            
            // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –ø—Ä–µ–¥–º–µ—Ç
            var testItem = ScriptableObject.CreateInstance<Item>();
            testItem.itemName = "TestItem";
            testItem.prefab = new GameObject("TestPrefab");
            
            var wrapper = new ItemWrapper(testItem);
            
            Debug.Log($"üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞ –≤ –ø–æ–∑–∏—Ü–∏–∏ {testPosition}");
            bool canPlace = validator.CanPlaceItem(wrapper, testPosition, Quaternion.identity);
            Debug.Log($"–†–µ–∑—É–ª—å—Ç–∞—Ç: {(canPlace ? "‚úÖ –ú–æ–∂–Ω–æ —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å" : "‚ùå –ù–µ–ª—å–∑—è —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å")}");
            
            // –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –æ–±—ä–µ–∫—Ç—ã
            DestroyImmediate(testItem.prefab);
            DestroyImmediate(testItem);
        }
        
        private void OnDrawGizmosSelected()
        {
            // –†–∏—Å—É–µ–º —Å—Ñ–µ—Ä—É —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            Gizmos.color = Color.yellow;
            Gizmos.DrawWireSphere(testPosition, testRadius);
            
            // –†–∏—Å—É–µ–º –±–æ–∫—Å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            Gizmos.color = Color.red;
            Gizmos.DrawWireCube(testPosition, Vector3.one);
        }
    }
}
