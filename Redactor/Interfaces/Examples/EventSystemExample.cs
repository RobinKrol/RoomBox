using UnityEngine;
using InventorySystem.EventSystem;
using InventorySystem.Logging;

namespace InventorySystem.Examples
{
    /// <summary>
    /// –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è Event System
    /// </summary>
    public class EventSystemExample : MonoBehaviour
    {
        [SerializeField] private InventoryEventSystem eventSystem;
        
        void Start()
        {
            // –ù–∞—Ö–æ–¥–∏–º Event System –µ—Å–ª–∏ –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω
            if (eventSystem == null)
                eventSystem = Object.FindFirstObjectByType<InventoryEventSystem>();
            
            if (eventSystem != null)
            {
                // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏—è
                SubscribeToEvents();
                Debug.Log("EventSystemExample: –ü–æ–¥–ø–∏—Å–∞–ª—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏—è");
            }
            else
            {
                Debug.LogWarning("EventSystemExample: InventoryEventSystem –Ω–µ –Ω–∞–π–¥–µ–Ω!");
            }
        }
        
        void OnDestroy()
        {
            // –û—Ç–ø–∏—Å—ã–≤–∞–µ–º—Å—è –æ—Ç —Å–æ–±—ã—Ç–∏–π
            if (eventSystem != null)
            {
                UnsubscribeFromEvents();
            }
        }
        
        private void SubscribeToEvents()
        {
            // –ë–∞–∑–æ–≤—ã–µ —Å–æ–±—ã—Ç–∏—è –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
            eventSystem.OnInventoryChanged += HandleInventoryChanged;
            eventSystem.OnItemAdded += HandleItemAdded;
            eventSystem.OnItemRemoved += HandleItemRemoved;
            
            // –°–æ–±—ã—Ç–∏—è UI
            eventSystem.OnInventoryToggled += HandleInventoryToggled;
        }
        
        private void UnsubscribeFromEvents()
        {
            // –ë–∞–∑–æ–≤—ã–µ —Å–æ–±—ã—Ç–∏—è –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
            eventSystem.OnInventoryChanged -= HandleInventoryChanged;
            eventSystem.OnItemAdded -= HandleItemAdded;
            eventSystem.OnItemRemoved -= HandleItemRemoved;
            
            // –°–æ–±—ã—Ç–∏—è UI
            eventSystem.OnInventoryToggled -= HandleInventoryToggled;
        }
        
        #region Event Handlers
        
        private void HandleInventoryChanged()
        {
            Debug.Log("üîî [EventSystemExample] –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å –∏–∑–º–µ–Ω–∏–ª—Å—è!");
        }
        
        private void HandleItemAdded(IItem item, int amount)
        {
            Debug.Log($"üîî [EventSystemExample] –î–æ–±–∞–≤–ª–µ–Ω –ø—Ä–µ–¥–º–µ—Ç: {item.ItemName} x{amount}");
        }
        
        private void HandleItemRemoved(IItem item, int amount)
        {
            Debug.Log($"üîî [EventSystemExample] –£–¥–∞–ª–µ–Ω –ø—Ä–µ–¥–º–µ—Ç: {item.ItemName} x{amount}");
        }
        
        private void HandleInventoryToggled(bool isOpen)
        {
            Debug.Log($"üîî [EventSystemExample] –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å {(isOpen ? "–æ—Ç–∫—Ä—ã—Ç" : "–∑–∞–∫—Ä—ã—Ç")}!");
        }
        
        #endregion
        
        #region Context Menu Methods
        
        [ContextMenu("–¢–µ—Å—Ç: –í—ã–∑–≤–∞—Ç—å –≤—Å–µ —Å–æ–±—ã—Ç–∏—è")]
        public void TestAllEvents()
        {
            if (eventSystem == null)
            {
                Debug.LogError("EventSystem –Ω–µ –Ω–∞–π–¥–µ–Ω!");
                return;
            }
            
            Debug.Log("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö —Å–æ–±—ã—Ç–∏–π Event System...");
            
            try
            {
                // –¢–µ—Å—Ç–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–µ —Å–æ–±—ã—Ç–∏—è
                eventSystem.InvokeInventoryChanged();
                eventSystem.InvokeInventoryToggled(true);
                eventSystem.InvokeInventoryToggled(false);
                
                Debug.Log("‚úÖ –ë–∞–∑–æ–≤—ã–µ —Å–æ–±—ã—Ç–∏—è –≤—ã–∑–≤–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ!");
            }
            catch (System.Exception e)
            {
                Debug.LogError($"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ —Å–æ–±—ã—Ç–∏–π: {e.Message}");
            }
            
            Debug.Log("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!");
        }
        
        [ContextMenu("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤")]
        public void CheckSubscribers()
        {
            if (eventSystem != null)
            {
                Debug.Log("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ Event System...");
                Debug.Log($"EventSystem –Ω–∞–π–¥–µ–Ω: {eventSystem.name}");
                
                // –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑ –≤—ã–∑–æ–≤–∞ –º–µ—Ç–æ–¥–∞
                Debug.Log("‚úÖ EventSystem –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é");
            }
            else
            {
                Debug.LogError("‚ùå EventSystem –Ω–µ –Ω–∞–π–¥–µ–Ω!");
            }
        }
        
        #endregion
    }
}
