using UnityEngine;
using InventorySystem.OptimizedComponents;
using InventorySystem.Configuration;
using InventorySystem.BaseComponents;

namespace InventorySystem.Examples
{
    /// <summary>
    /// –ë—ã—Å—Ç—Ä–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –Ω–∞–ª–æ–∂–µ–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–æ–≤
    /// </summary>
    public class QuickFixOverlap : MonoBehaviour
    {
        [ContextMenu("üö® –ë–´–°–¢–†–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ù–ê–õ–û–ñ–ï–ù–ò–ô")]
        public void QuickFixOverlapIssue()
        {
            Debug.Log("üö® –ë–´–°–¢–†–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ù–ê–õ–û–ñ–ï–ù–ò–ô –ü–†–ï–î–ú–ï–¢–û–í");
            Debug.Log("==========================================");
            
            // 1. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º OptimizedItemPlacementValidator
            FixOptimizedValidator();
            
            // 2. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ä—ã–π InventoryManager
            FixOldInventoryManager();
            
            // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ª–æ–∏
            CheckLayers();
            
            Debug.Log("‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û!");
            Debug.Log("–¢–µ–ø–µ—Ä—å –ø—Ä–µ–¥–º–µ—Ç—ã –Ω–µ –¥–æ–ª–∂–Ω—ã –Ω–∞–∫–ª–∞–¥—ã–≤–∞—Ç—å—Å—è –¥—Ä—É–≥ –Ω–∞ –¥—Ä—É–≥–∞.");
        }
        
        private void FixOptimizedValidator()
        {
            var validator = FindFirstObjectByType<OptimizedItemPlacementValidator>();
            if (validator == null)
            {
                Debug.LogError("‚ùå OptimizedItemPlacementValidator –Ω–µ –Ω–∞–π–¥–µ–Ω!");
                return;
            }
            
            Debug.Log("üîß –ò—Å–ø—Ä–∞–≤–ª—è–µ–º OptimizedItemPlacementValidator...");
            
            // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            var config = new PlacementValidationConfig();
            
            // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–∞—Å–∫—É –∫–æ–ª–ª–∏–∑–∏–π - Furniture + Surface (–ø—Ä–µ–¥–º–µ—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –¥–æ–ª–∂–Ω—ã –ø–µ—Ä–µ—Å–µ–∫–∞—Ç—å—Å—è)
            int furnitureLayer = LayerMask.NameToLayer("Furniture");
            int surfaceLayer = LayerMask.NameToLayer("Surface");
            
            if (furnitureLayer == -1)
            {
                Debug.LogError("‚ùå –°–ª–æ–π Furniture –Ω–µ –Ω–∞–π–¥–µ–Ω! –°–æ–∑–¥–∞–π—Ç–µ –µ–≥–æ –≤ Unity.");
                return;
            }
            
            LayerMask collisionMask = (1 << furnitureLayer);
            if (surfaceLayer != -1)
                collisionMask |= (1 << surfaceLayer);
            
            // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–∞—Å–∫—É –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–µ–π - Surface + StaticEnvironment (–¥–ª—è –ø–æ–ª–∞)
            int staticEnvLayer = LayerMask.NameToLayer("StaticEnvironment");
            LayerMask surfaceMask = 0;
            
            if (surfaceLayer != -1)
                surfaceMask |= (1 << surfaceLayer);
            if (staticEnvLayer != -1)
                surfaceMask |= (1 << staticEnvLayer);
                
            if (surfaceMask == 0)
                surfaceMask = (LayerMask)(-1); // Fallback –Ω–∞ –≤—Å–µ —Å–ª–æ–∏
            
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —á–µ—Ä–µ–∑ reflection
            SetConfigField(config, "collisionCheckMask", collisionMask);
            SetConfigField(config, "surfaceCheckMask", surfaceMask);
            SetConfigField(config, "preventObjectOverlap", true);
            SetConfigField(config, "useStrictValidation", true);
            SetConfigField(config, "enableLayerSystem", true);
            SetConfigField(config, "collisionCheckRadius", 0.3f);
            SetConfigField(config, "overlapCheckMargin", 0.05f);
            
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            SetValidatorConfig(validator, config);
            
            Debug.Log($"‚úÖ OptimizedItemPlacementValidator –∏—Å–ø—Ä–∞–≤–ª–µ–Ω:");
            Debug.Log($"  - CollisionCheckMask: {collisionMask} (Furniture + Surface)");
            Debug.Log($"  - SurfaceCheckMask: {surfaceMask} (Surface + StaticEnvironment)");
            Debug.Log($"  - PreventObjectOverlap: true");
            Debug.Log($"  - UseStrictValidation: true");
        }
        
        private void FixOldInventoryManager()
        {
            var oldManager = FindFirstObjectByType<InventoryManager>();
            if (oldManager == null)
            {
                Debug.Log("‚ÑπÔ∏è –°—Ç–∞—Ä—ã–π InventoryManager –Ω–µ –Ω–∞–π–¥–µ–Ω (—ç—Ç–æ —Ö–æ—Ä–æ—à–æ)");
                return;
            }
            
            Debug.Log("üîß –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ä—ã–π InventoryManager...");
            
            // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–∞—Å–∫—É –∫–æ–ª–ª–∏–∑–∏–π - Furniture + Surface (–ø—Ä–µ–¥–º–µ—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –¥–æ–ª–∂–Ω—ã –ø–µ—Ä–µ—Å–µ–∫–∞—Ç—å—Å—è)
            int furnitureLayer = LayerMask.NameToLayer("Furniture");
            int surfaceLayer = LayerMask.NameToLayer("Surface");
            
            if (furnitureLayer == -1)
            {
                Debug.LogError("‚ùå –°–ª–æ–π Furniture –Ω–µ –Ω–∞–π–¥–µ–Ω!");
                return;
            }
            
            LayerMask collisionMask = (1 << furnitureLayer);
            if (surfaceLayer != -1)
                collisionMask |= (1 << surfaceLayer);
            
            // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–∞—Å–∫—É –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–µ–π - Surface + StaticEnvironment (–¥–ª—è –ø–æ–ª–∞)
            int staticEnvLayer = LayerMask.NameToLayer("StaticEnvironment");
            LayerMask surfaceMask = 0;
            
            if (surfaceLayer != -1)
                surfaceMask |= (1 << surfaceLayer);
            if (staticEnvLayer != -1)
                surfaceMask |= (1 << staticEnvLayer);
                
            if (surfaceMask == 0)
                surfaceMask = (LayerMask)(-1); // Fallback –Ω–∞ –≤—Å–µ —Å–ª–æ–∏
            
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —á–µ—Ä–µ–∑ reflection
            SetField(oldManager, "collisionCheckMask", collisionMask);
            SetField(oldManager, "surfaceCheckMask", surfaceMask);
            SetField(oldManager, "preventObjectOverlap", true);
            SetField(oldManager, "enableLayerSystem", true);
            SetField(oldManager, "collisionCheckRadius", 0.3f);
            SetField(oldManager, "overlapCheckMargin", 0.05f);
            
            Debug.Log($"‚úÖ –°—Ç–∞—Ä—ã–π InventoryManager –∏—Å–ø—Ä–∞–≤–ª–µ–Ω:");
            Debug.Log($"  - CollisionCheckMask: {collisionMask} (Furniture + Surface)");
            Debug.Log($"  - SurfaceCheckMask: {surfaceMask} (Surface + StaticEnvironment)");
            Debug.Log($"  - PreventObjectOverlap: true");
        }
        
        private void CheckLayers()
        {
            Debug.Log("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ª–æ–∏...");
            
            int furnitureLayer = LayerMask.NameToLayer("Furniture");
            int surfaceLayer = LayerMask.NameToLayer("Surface");
            int staticEnvLayer = LayerMask.NameToLayer("StaticEnvironment");
            
            Debug.Log($"  - Furniture: {(furnitureLayer != -1 ? $"‚úÖ {furnitureLayer}" : "‚ùå –Ω–µ –Ω–∞–π–¥–µ–Ω")}");
            Debug.Log($"  - Surface: {(surfaceLayer != -1 ? $"‚úÖ {surfaceLayer}" : "‚ùå –Ω–µ –Ω–∞–π–¥–µ–Ω")}");
            Debug.Log($"  - StaticEnvironment: {(staticEnvLayer != -1 ? $"‚úÖ {staticEnvLayer}" : "‚ùå –Ω–µ –Ω–∞–π–¥–µ–Ω")}");
            
            if (furnitureLayer == -1)
            {
                Debug.LogError("‚ùå –°–æ–∑–¥–∞–π—Ç–µ —Å–ª–æ–π Furniture –≤ Unity: Edit ‚Üí Project Settings ‚Üí Tags and Layers");
            }
        }
        
        private void SetConfigField(PlacementValidationConfig config, string fieldName, object value)
        {
            var field = typeof(PlacementValidationConfig).GetField(fieldName, 
                System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance);
            field?.SetValue(config, value);
        }
        
        private void SetValidatorConfig(OptimizedItemPlacementValidator validator, PlacementValidationConfig config)
        {
            var configField = typeof(BaseInventoryComponent<PlacementValidationConfig>).GetField("configuration", 
                System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance);
            configField?.SetValue(validator, config);
        }
        
        private void SetField(object obj, string fieldName, object value)
        {
            var field = obj.GetType().GetField(fieldName, 
                System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance | 
                System.Reflection.BindingFlags.Public);
            field?.SetValue(obj, value);
        }
        
        [ContextMenu("üìã –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")]
        public void CheckCurrentSettings()
        {
            Debug.Log("üìã –¢–ï–ö–£–©–ò–ï –ù–ê–°–¢–†–û–ô–ö–ò:");
            
            var validator = FindFirstObjectByType<OptimizedItemPlacementValidator>();
            if (validator != null)
            {
                var config = validator.Configuration;
                Debug.Log($"OptimizedItemPlacementValidator:");
                Debug.Log($"  - PreventObjectOverlap: {config.PreventObjectOverlap}");
                Debug.Log($"  - UseStrictValidation: {config.UseStrictValidation}");
                Debug.Log($"  - CollisionCheckMask: {config.CollisionCheckMask}");
                Debug.Log($"  - SurfaceCheckMask: {config.SurfaceCheckMask}");
            }
            
            var oldManager = FindFirstObjectByType<InventoryManager>();
            if (oldManager != null)
            {
                Debug.Log($"–°—Ç–∞—Ä—ã–π InventoryManager:");
                Debug.Log($"  - PreventObjectOverlap: {oldManager.PreventObjectOverlap}");
                Debug.Log($"  - CollisionCheckMask: {oldManager.CollisionCheckMask}");
                Debug.Log($"  - SurfaceCheckMask: {oldManager.SurfaceCheckMask}");
            }
        }
    }
}
